<?php/** * * Flood * * @package   Flood * * @author    Beau Hastings <beausy@gmail.com> * @copyright Authors * *//** * @category   Flood * @package    Flood_Hydrograph * @subpackage Parser * @copyright  Authors */class Flood_Hydrograph_Parser_Xml{  /**   * Converts hydrograph XML data to an array   *   * @param   string  $file   Path to XML file   * @return  array   */  public static function toArray($file)  {    $observed = array();    $forecast = array();    $xml = @simplexml_load_file($file);    if (false === $xml)      return array();    // Observed Stage    foreach ($xml->observed->datum as $data)    {      $datetime = $data->valid;      $stage    = (string) $data->primary;      $flow     = (string) $data->secondary;      preg_match('/(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}).*$/i', $datetime, $matches);      $datetime   = date('Y/m/d H:i:s', strtotime($matches[1] . 'T' . $matches[2]));      $observed[] = array($datetime, (float) $stage, (float) $flow);    }    // Forecast Stage    foreach ($xml->forecast->datum as $data)    {      $datetime = $data->valid;      $stage    = (string) $data->primary;      $flow     = (string) $data->secondary;      preg_match('/(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}).*$/i', $datetime, $matches);      $datetime   = date('Y/m/d H:i:s', strtotime($matches[1] . ' ' . $matches[2]));      $forecast[] = array($datetime, (float) $stage, (float) $flow);    }    return array(      'observed' => array_reverse($observed),      'forecast' => $forecast    );  }  /**   * Converts hydrograph XML data to CSV format   *   * @param   string  $file   Path to XML file   * @return  array   */  public static function toCsv($file)  {    $xml = @simplexml_load_file($file);    if (false === $xml)      return array();    // Observed Stage    $observed = "Date,Stage\\n";    foreach ($xml->observed->datum as $data)    {      $datetime = (string) $data->valid;      $stage    = (string) $data->primary;      preg_match('/(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}).*$/i', $datetime, $matches);      $datetime  = date('Y/m/d H:i:s', strtotime($matches[1] . 'T' . $matches[2]));      $observed .= sprintf("%s,%s\\n", $datetime, $stage);    }    // Forecast Stage    $forecast = "Date,Stage\\n";    foreach ($xml->forecast->datum as $data)    {      $datetime = (string) $data->valid;      $stage    = (string) $data->primary;      preg_match('/(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}).*$/i', $datetime, $matches);      $datetime  = date('Y/m/d H:i:s', strtotime($matches[1] . ' ' . $matches[2]));      $forecast .= sprintf("%s,%s\\n", $datetime, $stage);    }    return array(      'observed' => $observed,      'forecast' => $forecast    );  }}